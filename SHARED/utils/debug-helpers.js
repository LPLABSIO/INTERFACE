const { log, randomWait } = require('./utils');

/**
 * Mode Debug Assist√© - Permet l'intervention manuelle si un √©l√©ment n'est pas trouv√©
 */

let debugMode = false;
let assistedMode = false;

/**
 * Configure le mode debug
 */
function setDebugMode(isDebug, isAssisted = false) {
  debugMode = isDebug;
  assistedMode = isAssisted;
  if (assistedMode) {
    log('üîß DEBUG ASSIST√â activ√© - Le bot continuera en cas d\'erreur pour permettre l\'intervention manuelle');
  }
}

/**
 * Wrapper pour findAndClickWithPolling avec mode debug assist√©
 */
async function findAndClickWithDebugFallback(client, selector, options = {}) {
  const maxRetries = assistedMode ? 10 : 1; // En mode assist√©, on r√©essaye plus longtemps
  const waitTime = options.waitTime || 5000;
  const throwError = options.throwError !== undefined ? options.throwError : true;
  const retryInterval = options.retryInterval || 10000; // 10 secondes entre les tentatives

  // En mode debug assist√©, on ne lance jamais d'erreur
  const shouldThrow = assistedMode ? false : throwError;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    // Importer dynamiquement pour √©viter les d√©pendances circulaires
    const { findAndClickWithPolling } = require('./utils');

    // Appeler findAndClickWithPolling qui retourne true/false sans lancer d'erreur
    const clicked = await findAndClickWithPolling(client, selector, waitTime, false);

    if (clicked) {
      if (attempt > 1) {
        log(`‚úÖ √âl√©ment trouv√© apr√®s intervention manuelle (tentative ${attempt})`);
      }
      return true;
    }

    // L'√©l√©ment n'a pas √©t√© trouv√©
    if (!assistedMode && throwError) {
      throw new Error(`Element not clickable after ${waitTime}ms: ${selector}`);
    }

    // En mode assist√©, on affiche les messages et on pause
    log(`‚ö†Ô∏è DEBUG ASSIST√â - √âl√©ment non trouv√©: ${selector}`);
    log(`   ‚Üí Tentative ${attempt}/${maxRetries}`);
    log(`   ‚Üí Vous pouvez intervenir manuellement`);
    log(`   ‚Üí Le bot r√©essayera dans ${retryInterval/1000} secondes...`);

    if (attempt < maxRetries) {
      // Attendre avant de r√©essayer
      await randomWait(retryInterval/1000, retryInterval/1000 + 2);
      log(`   ‚Üí Nouvelle tentative...`);
    } else {
      log(`‚è≠Ô∏è DEBUG ASSIST√â - Passage √† l'√©tape suivante apr√®s ${maxRetries} tentatives`);
      return false; // On continue le flow sans bloquer
    }
  }

  return false;
}

/**
 * Wrapper pour findAndSetValue avec mode debug assist√©
 */
async function findAndSetValueWithDebugFallback(client, selector, value, options = {}) {
  const maxRetries = assistedMode ? 10 : 1;
  const waitTime = options.waitTime || 5000;
  const retryInterval = options.retryInterval || 10000;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const { findAndSetValue } = require('./utils');
      await findAndSetValue(client, selector, value, waitTime);
      if (attempt > 1) {
        log(`‚úÖ Champ rempli apr√®s intervention manuelle (tentative ${attempt})`);
      }
      return true;
    } catch (error) {
      if (!assistedMode) {
        throw error;
      }

      log(`‚ö†Ô∏è DEBUG ASSIST√â - Champ non trouv√©: ${selector}`);
      log(`   ‚Üí Tentative ${attempt}/${maxRetries}`);
      log(`   ‚Üí Valeur √† entrer: ${value.substring(0, 20)}...`);
      log(`   ‚Üí Vous pouvez remplir le champ manuellement`);
      log(`   ‚Üí Le bot r√©essayera dans ${retryInterval/1000} secondes...`);

      if (attempt < maxRetries) {
        await randomWait(retryInterval/1000, retryInterval/1000 + 2);
        log(`   ‚Üí Nouvelle tentative...`);
      } else {
        log(`‚è≠Ô∏è DEBUG ASSIST√â - Passage √† l'√©tape suivante apr√®s ${maxRetries} tentatives`);
        return false;
      }
    }
  }

  return false;
}

/**
 * Wrapper pour findAndTypeCharByChar avec mode debug assist√©
 */
async function findAndTypeWithDebugFallback(client, text, isSecure = false, options = {}) {
  const maxRetries = assistedMode ? 10 : 1;
  const retryInterval = options.retryInterval || 10000;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const { findAndTypeCharByChar } = require('./utils');
      await findAndTypeCharByChar(client, text, isSecure);
      if (attempt > 1) {
        log(`‚úÖ Texte saisi apr√®s intervention manuelle (tentative ${attempt})`);
      }
      return true;
    } catch (error) {
      if (!assistedMode) {
        throw error;
      }

      log(`‚ö†Ô∏è DEBUG ASSIST√â - Impossible de saisir le texte`);
      log(`   ‚Üí Tentative ${attempt}/${maxRetries}`);
      if (!isSecure) {
        log(`   ‚Üí Texte √† saisir: ${text.substring(0, 20)}...`);
      }
      log(`   ‚Üí Vous pouvez saisir le texte manuellement`);
      log(`   ‚Üí Le bot r√©essayera dans ${retryInterval/1000} secondes...`);

      if (attempt < maxRetries) {
        await randomWait(retryInterval/1000, retryInterval/1000 + 2);
        log(`   ‚Üí Nouvelle tentative...`);
      } else {
        log(`‚è≠Ô∏è DEBUG ASSIST√â - Passage √† l'√©tape suivante apr√®s ${maxRetries} tentatives`);
        return false;
      }
    }
  }

  return false;
}

/**
 * V√©rifie si on peut continuer (l'utilisateur a peut-√™tre d√©j√† chang√© d'√©cran)
 */
async function checkIfCanProceed(client, expectedElements = []) {
  if (!assistedMode || expectedElements.length === 0) {
    return false;
  }

  try {
    // V√©rifier si un des √©l√©ments attendus est pr√©sent
    for (const selector of expectedElements) {
      try {
        const element = await client.$(selector);
        if (await element.isDisplayed()) {
          log(`‚úÖ D√©tection automatique: L'utilisateur semble avoir compl√©t√© l'action`);
          return true;
        }
      } catch (e) {
        // √âl√©ment non trouv√©, continuer
      }
    }
  } catch (error) {
    // Erreur lors de la v√©rification
  }

  return false;
}

/**
 * Log une √©tape importante en mode debug assist√©
 */
function logDebugStep(stepName, details = '') {
  if (assistedMode) {
    log(`\n${'='.repeat(50)}`);
    log(`üîß √âTAPE: ${stepName}`);
    if (details) {
      log(`   ${details}`);
    }
    log(`${'='.repeat(50)}\n`);
  } else {
    log(`${stepName}${details ? ': ' + details : ''}`);
  }
}

/**
 * Pause interactive en mode debug assist√©
 */
async function debugPause(message = 'Pause pour intervention manuelle', duration = 5) {
  if (assistedMode) {
    log(`\n‚è∏Ô∏è  ${message}`);
    log(`   ‚Üí Reprise dans ${duration} secondes...`);
    await randomWait(duration, duration + 1);
  }
}

module.exports = {
  setDebugMode,
  findAndClickWithDebugFallback,
  findAndSetValueWithDebugFallback,
  findAndTypeWithDebugFallback,
  checkIfCanProceed,
  logDebugStep,
  debugPause
};